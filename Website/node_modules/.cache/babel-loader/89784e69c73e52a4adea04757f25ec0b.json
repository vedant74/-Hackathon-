{"ast":null,"code":"var _jsxFileName = \"/Users/bhavyameghnani/Desktop/react-saas-template/src/logged_in/components/posts/AddPost.js\";\nimport React, { Fragment, useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Box } from \"@material-ui/core\";\nimport ActionPaper from \"../../../shared/components/ActionPaper\";\nimport ButtonCircularProgress from \"../../../shared/components/ButtonCircularProgress\";\nimport AddPostOptions from \"./AddPostOptions\";\n\nfunction AddPost(props) {\n  const {\n    pushMessageToSnackbar,\n    Dropzone,\n    EmojiTextArea,\n    DateTimePicker,\n    ImageCropper,\n    onClose\n  } = props;\n  const [files, setFiles] = useState([]);\n  const [uploadAt, setUploadAt] = useState(new Date());\n  const [loading, setLoading] = useState(false);\n  const [cropperFile, setCropperFile] = useState(null);\n  const acceptDrop = useCallback(file => {\n    setFiles([file]);\n  }, [setFiles]);\n  const onDrop = useCallback((acceptedFiles, rejectedFiles) => {\n    if (acceptedFiles.length + rejectedFiles.length > 1) {\n      pushMessageToSnackbar({\n        isErrorMessage: true,\n        text: \"You cannot upload more than one file at once\"\n      });\n    } else if (acceptedFiles.length === 0) {\n      pushMessageToSnackbar({\n        isErrorMessage: true,\n        text: \"The file you wanted to upload isn't an image\"\n      });\n    } else if (acceptedFiles.length === 1) {\n      const file = acceptedFiles[0];\n      file.preview = URL.createObjectURL(file);\n      file.key = new Date().getTime();\n      setCropperFile(file);\n    }\n  }, [pushMessageToSnackbar, setCropperFile]);\n  const onCropperClose = useCallback(() => {\n    setCropperFile(null);\n  }, [setCropperFile]);\n  const deleteItem = useCallback(() => {\n    setCropperFile(null);\n    setFiles([]);\n  }, [setCropperFile, setFiles]);\n  const onCrop = useCallback(dataUrl => {\n    const file = { ...cropperFile\n    };\n    file.preview = dataUrl;\n    acceptDrop(file);\n    setCropperFile(null);\n  }, [acceptDrop, cropperFile, setCropperFile]);\n  const handleUpload = useCallback(() => {\n    setLoading(true);\n    setTimeout(() => {\n      pushMessageToSnackbar({\n        text: \"Your post has been uploaded\"\n      });\n      onClose();\n    }, 1500);\n  }, [setLoading, onClose, pushMessageToSnackbar]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ActionPaper, {\n    helpPadding: true,\n    maxWidth: \"md\",\n    content: /*#__PURE__*/React.createElement(AddPostOptions, {\n      EmojiTextArea: EmojiTextArea,\n      Dropzone: Dropzone,\n      files: files,\n      onDrop: onDrop,\n      deleteItem: deleteItem,\n      DateTimePicker: DateTimePicker,\n      uploadAt: uploadAt,\n      onChangeUploadAt: setUploadAt,\n      onCrop: onCrop,\n      ImageCropper: ImageCropper,\n      cropperFile: cropperFile,\n      onCropperClose: onCropperClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }),\n    actions: /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      mr: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: onClose,\n      disabled: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }\n    }, \"Back\")), /*#__PURE__*/React.createElement(Button, {\n      onClick: handleUpload,\n      variant: \"contained\",\n      color: \"secondary\",\n      disabled: files.length === 0 || loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, \"Upload \", loading && /*#__PURE__*/React.createElement(ButtonCircularProgress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 34\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }));\n}\n\nAddPost.propTypes = {\n  pushMessageToSnackbar: PropTypes.func,\n  onClose: PropTypes.func,\n  Dropzone: PropTypes.elementType,\n  EmojiTextArea: PropTypes.elementType,\n  DateTimePicker: PropTypes.elementType,\n  ImageCropper: PropTypes.elementType\n};\nexport default AddPost;","map":{"version":3,"sources":["/Users/bhavyameghnani/Desktop/react-saas-template/src/logged_in/components/posts/AddPost.js"],"names":["React","Fragment","useState","useCallback","PropTypes","Button","Box","ActionPaper","ButtonCircularProgress","AddPostOptions","AddPost","props","pushMessageToSnackbar","Dropzone","EmojiTextArea","DateTimePicker","ImageCropper","onClose","files","setFiles","uploadAt","setUploadAt","Date","loading","setLoading","cropperFile","setCropperFile","acceptDrop","file","onDrop","acceptedFiles","rejectedFiles","length","isErrorMessage","text","preview","URL","createObjectURL","key","getTime","onCropperClose","deleteItem","onCrop","dataUrl","handleUpload","setTimeout","propTypes","func","elementType"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Box } from \"@material-ui/core\";\nimport ActionPaper from \"../../../shared/components/ActionPaper\";\nimport ButtonCircularProgress from \"../../../shared/components/ButtonCircularProgress\";\nimport AddPostOptions from \"./AddPostOptions\";\n\nfunction AddPost(props) {\n  const {\n    pushMessageToSnackbar,\n    Dropzone,\n    EmojiTextArea,\n    DateTimePicker,\n    ImageCropper,\n    onClose,\n  } = props;\n\n  const [files, setFiles] = useState([]);\n  const [uploadAt, setUploadAt] = useState(new Date());\n  const [loading, setLoading] = useState(false);\n  const [cropperFile, setCropperFile] = useState(null);\n\n  const acceptDrop = useCallback(\n    (file) => {\n      setFiles([file]);\n    },\n    [setFiles]\n  );\n\n  const onDrop = useCallback(\n    (acceptedFiles, rejectedFiles) => {\n      if (acceptedFiles.length + rejectedFiles.length > 1) {\n        pushMessageToSnackbar({\n          isErrorMessage: true,\n          text: \"You cannot upload more than one file at once\",\n        });\n      } else if (acceptedFiles.length === 0) {\n        pushMessageToSnackbar({\n          isErrorMessage: true,\n          text: \"The file you wanted to upload isn't an image\",\n        });\n      } else if (acceptedFiles.length === 1) {\n        const file = acceptedFiles[0];\n        file.preview = URL.createObjectURL(file);\n        file.key = new Date().getTime();\n        setCropperFile(file);\n      }\n    },\n    [pushMessageToSnackbar, setCropperFile]\n  );\n\n  const onCropperClose = useCallback(() => {\n    setCropperFile(null);\n  }, [setCropperFile]);\n\n  const deleteItem = useCallback(() => {\n    setCropperFile(null);\n    setFiles([]);\n  }, [setCropperFile, setFiles]);\n\n  const onCrop = useCallback(\n    (dataUrl) => {\n      const file = { ...cropperFile };\n      file.preview = dataUrl;\n      acceptDrop(file);\n      setCropperFile(null);\n    },\n    [acceptDrop, cropperFile, setCropperFile]\n  );\n\n  const handleUpload = useCallback(() => {\n    setLoading(true);\n    setTimeout(() => {\n      pushMessageToSnackbar({\n        text: \"Your post has been uploaded\",\n      });\n      onClose();\n    }, 1500);\n  }, [setLoading, onClose, pushMessageToSnackbar]);\n\n  return (\n    <Fragment>\n      <ActionPaper\n        helpPadding\n        maxWidth=\"md\"\n        content={\n          <AddPostOptions\n            EmojiTextArea={EmojiTextArea}\n            Dropzone={Dropzone}\n            files={files}\n            onDrop={onDrop}\n            deleteItem={deleteItem}\n            DateTimePicker={DateTimePicker}\n            uploadAt={uploadAt}\n            onChangeUploadAt={setUploadAt}\n            onCrop={onCrop}\n            ImageCropper={ImageCropper}\n            cropperFile={cropperFile}\n            onCropperClose={onCropperClose}\n          />\n        }\n        actions={\n          <Fragment>\n            <Box mr={1}>\n              <Button onClick={onClose} disabled={loading}>\n                Back\n              </Button>\n            </Box>\n            <Button\n              onClick={handleUpload}\n              variant=\"contained\"\n              color=\"secondary\"\n              disabled={files.length === 0 || loading}\n            >\n              Upload {loading && <ButtonCircularProgress />}\n            </Button>\n          </Fragment>\n        }\n      />\n    </Fragment>\n  );\n}\n\nAddPost.propTypes = {\n  pushMessageToSnackbar: PropTypes.func,\n  onClose: PropTypes.func,\n  Dropzone: PropTypes.elementType,\n  EmojiTextArea: PropTypes.elementType,\n  DateTimePicker: PropTypes.elementType,\n  ImageCropper: PropTypes.elementType,\n};\n\nexport default AddPost;\n"]},"metadata":{},"sourceType":"module"}