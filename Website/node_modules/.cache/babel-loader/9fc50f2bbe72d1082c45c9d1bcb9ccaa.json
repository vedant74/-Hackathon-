{"ast":null,"code":"var _jsxFileName = \"/Users/bhavyameghnani/Desktop/react-saas-template/src/shared/components/ConsecutiveSnackbarMessages.js\";\nimport React, { useCallback, useState, useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Snackbar, withStyles } from \"@material-ui/core\";\n\nconst styles = theme => ({\n  root: {\n    backgroundColor: theme.palette.primary.main,\n    paddingTop: 0,\n    paddingBottom: 0\n  }\n});\n\nfunction ConsecutiveSnackbars(props) {\n  const {\n    classes,\n    getPushMessageFromChild\n  } = props;\n  const [isOpen, setIsOpen] = useState(false);\n  const [messageInfo, setMessageInfo] = useState({});\n  const queue = useRef([]);\n  const processQueue = useCallback(() => {\n    if (queue.current.length > 0) {\n      setMessageInfo(queue.current.shift());\n      setIsOpen(true);\n    }\n  }, [setMessageInfo, setIsOpen, queue]);\n  const handleClose = useCallback((_, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setIsOpen(false);\n  }, [setIsOpen]);\n  const pushMessage = useCallback(message => {\n    queue.current.push({\n      message,\n      key: new Date().getTime()\n    });\n\n    if (isOpen) {\n      // immediately begin dismissing current message\n      // to start showing new one\n      setIsOpen(false);\n    } else {\n      processQueue();\n    }\n  }, [queue, isOpen, setIsOpen, processQueue]);\n  useEffect(() => {\n    getPushMessageFromChild(pushMessage);\n  }, [getPushMessageFromChild, pushMessage]);\n  return /*#__PURE__*/React.createElement(Snackbar, {\n    disableWindowBlurListener: true,\n    key: messageInfo.key,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    open: isOpen,\n    autoHideDuration: 6000,\n    onClose: handleClose,\n    onExited: processQueue,\n    ContentProps: {\n      classes: {\n        root: classes.root\n      }\n    },\n    message: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, messageInfo.message ? messageInfo.message.text : null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  });\n}\n\nConsecutiveSnackbars.propTypes = {\n  getPushMessageFromChild: PropTypes.func.isRequired,\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(ConsecutiveSnackbars);","map":{"version":3,"sources":["/Users/bhavyameghnani/Desktop/react-saas-template/src/shared/components/ConsecutiveSnackbarMessages.js"],"names":["React","useCallback","useState","useRef","useEffect","PropTypes","Snackbar","withStyles","styles","theme","root","backgroundColor","palette","primary","main","paddingTop","paddingBottom","ConsecutiveSnackbars","props","classes","getPushMessageFromChild","isOpen","setIsOpen","messageInfo","setMessageInfo","queue","processQueue","current","length","shift","handleClose","_","reason","pushMessage","message","push","key","Date","getTime","vertical","horizontal","text","propTypes","func","isRequired","object","withTheme"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Snackbar, withStyles } from \"@material-ui/core\";\n\nconst styles = (theme) => ({\n  root: {\n    backgroundColor: theme.palette.primary.main,\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n});\n\nfunction ConsecutiveSnackbars(props) {\n  const { classes, getPushMessageFromChild } = props;\n  const [isOpen, setIsOpen] = useState(false);\n  const [messageInfo, setMessageInfo] = useState({});\n  const queue = useRef([]);\n\n  const processQueue = useCallback(() => {\n    if (queue.current.length > 0) {\n      setMessageInfo(queue.current.shift());\n      setIsOpen(true);\n    }\n  }, [setMessageInfo, setIsOpen, queue]);\n\n  const handleClose = useCallback((_, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setIsOpen(false);\n  }, [setIsOpen]);\n\n  const pushMessage = useCallback(message => {\n    queue.current.push({\n      message,\n      key: new Date().getTime(),\n    });\n    if (isOpen) {\n      // immediately begin dismissing current message\n      // to start showing new one\n      setIsOpen(false);\n    } else {\n      processQueue();\n    }\n  }, [queue, isOpen, setIsOpen, processQueue]);\n\n  useEffect(() => {\n    getPushMessageFromChild(pushMessage);\n  }, [getPushMessageFromChild, pushMessage]);\n\n  return (\n    <Snackbar\n      disableWindowBlurListener\n      key={messageInfo.key}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"left\",\n      }}\n      open={isOpen}\n      autoHideDuration={6000}\n      onClose={handleClose}\n      onExited={processQueue}\n      ContentProps={{\n        classes: {\n          root: classes.root,\n        },\n      }}\n      message={\n        <span>{messageInfo.message ? messageInfo.message.text : null}</span>\n      }\n    />\n  );\n\n}\n\nConsecutiveSnackbars.propTypes = {\n  getPushMessageFromChild: PropTypes.func.isRequired,\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(ConsecutiveSnackbars);\n"]},"metadata":{},"sourceType":"module"}