{"ast":null,"code":"var _jsxFileName = \"/Users/bhavyameghnani/Desktop/react-saas-template/src/logged_in/components/subscription/AddBalanceDialog.js\";\nimport React, { useState, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, CardElement, IbanElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { Grid, Button, Box, withTheme } from \"@material-ui/core\";\nimport StripeCardForm from \"./stripe/StripeCardForm\";\nimport StripeIbanForm from \"./stripe/StripeIBANForm\";\nimport FormDialog from \"../../../shared/components/FormDialog\";\nimport ColoredButton from \"../../../shared/components/ColoredButton\";\nimport HighlightedInformation from \"../../../shared/components/HighlightedInformation\";\nimport ButtonCircularProgress from \"../../../shared/components/ButtonCircularProgress\";\nconst stripePromise = loadStripe(\"pk_test_6pRNASCoBOKtIshFeQd4XMUh\");\nconst paymentOptions = [\"Credit Card\", \"SEPA Direct Debit\"];\nconst AddBalanceDialog = withTheme(function (props) {\n  const {\n    open,\n    theme,\n    onClose,\n    onSuccess\n  } = props;\n  const [loading, setLoading] = useState(false);\n  const [paymentOption, setPaymentOption] = useState(\"Credit Card\");\n  const [stripeError, setStripeError] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [amountError, setAmountError] = useState(\"\");\n  const elements = useElements();\n  const stripe = useStripe();\n\n  const onAmountChange = amount => {\n    if (amount < 0) {\n      return;\n    }\n\n    if (amountError) {\n      setAmountError(\"\");\n    }\n\n    setAmount(amount);\n  };\n\n  const getStripePaymentInfo = () => {\n    switch (paymentOption) {\n      case \"Credit Card\":\n        {\n          return {\n            type: \"card\",\n            card: elements.getElement(CardElement),\n            billing_details: {\n              name: name\n            }\n          };\n        }\n\n      case \"SEPA Direct Debit\":\n        {\n          return {\n            type: \"sepa_debit\",\n            sepa_debit: elements.getElement(IbanElement),\n            billing_details: {\n              email: email,\n              name: name\n            }\n          };\n        }\n\n      default:\n        throw new Error(\"No case selected in switch statement\");\n    }\n  };\n\n  const renderPaymentComponent = () => {\n    switch (paymentOption) {\n      case \"Credit Card\":\n        return /*#__PURE__*/React.createElement(Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Box, {\n          mb: 2,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(StripeCardForm, {\n          stripeError: stripeError,\n          setStripeError: setStripeError,\n          setName: setName,\n          name: name,\n          amount: amount,\n          amountError: amountError,\n          onAmountChange: onAmountChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }\n        })), /*#__PURE__*/React.createElement(HighlightedInformation, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }\n        }, \"You can check this integration using the credit card number\", \" \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }\n        }, \"4242 4242 4242 4242 04 / 24 24 242 42424\")));\n\n      case \"SEPA Direct Debit\":\n        return /*#__PURE__*/React.createElement(Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Box, {\n          mb: 2,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(StripeIbanForm, {\n          stripeError: stripeError,\n          setStripeError: setStripeError,\n          setName: setName,\n          setEmail: setEmail,\n          name: name,\n          email: email,\n          amount: amount,\n          amountError: amountError,\n          onAmountChange: onAmountChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }\n        })), /*#__PURE__*/React.createElement(HighlightedInformation, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }\n        }, \"You can check this integration using the IBAN\", /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }\n        }, \"DE89370400440532013000\")));\n\n      default:\n        throw new Error(\"No case selected in switch statement\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(FormDialog, {\n    open: open,\n    onClose: onClose,\n    headline: \"Add Balance\",\n    hideBackdrop: false,\n    loading: loading,\n    onFormSubmit: async event => {\n      event.preventDefault();\n\n      if (amount <= 0) {\n        setAmountError(\"Can't be zero\");\n        return;\n      }\n\n      if (stripeError) {\n        setStripeError(\"\");\n      }\n\n      setLoading(true);\n      const {\n        error\n      } = await stripe.createPaymentMethod(getStripePaymentInfo());\n\n      if (error) {\n        setStripeError(error.message);\n        setLoading(false);\n        return;\n      }\n\n      onSuccess();\n    },\n    content: /*#__PURE__*/React.createElement(Box, {\n      pb: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      mb: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, paymentOptions.map(option => /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      key: option,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ColoredButton, {\n      variant: option === paymentOption ? \"contained\" : \"outlined\",\n      disableElevation: true,\n      onClick: () => {\n        setStripeError(\"\");\n        setPaymentOption(option);\n      },\n      color: theme.palette.common.black,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 19\n      }\n    }, option))))), renderPaymentComponent()),\n    actions: /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"secondary\",\n      type: \"submit\",\n      size: \"large\",\n      disabled: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }, \"Pay with Stripe \", loading && /*#__PURE__*/React.createElement(ButtonCircularProgress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 41\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  });\n});\nAddBalanceDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  theme: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\n\nfunction Wrapper(props) {\n  const {\n    open,\n    onClose,\n    onSuccess\n  } = props;\n  return /*#__PURE__*/React.createElement(Elements, {\n    stripe: stripePromise,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 5\n    }\n  }, open && /*#__PURE__*/React.createElement(AddBalanceDialog, {\n    open: open,\n    onClose: onClose,\n    onSuccess: onSuccess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }));\n}\n\nAddBalanceDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\nexport default Wrapper;","map":{"version":3,"sources":["/Users/bhavyameghnani/Desktop/react-saas-template/src/logged_in/components/subscription/AddBalanceDialog.js"],"names":["React","useState","Fragment","PropTypes","loadStripe","Elements","CardElement","IbanElement","useStripe","useElements","Grid","Button","Box","withTheme","StripeCardForm","StripeIbanForm","FormDialog","ColoredButton","HighlightedInformation","ButtonCircularProgress","stripePromise","paymentOptions","AddBalanceDialog","props","open","theme","onClose","onSuccess","loading","setLoading","paymentOption","setPaymentOption","stripeError","setStripeError","name","setName","email","setEmail","amount","setAmount","amountError","setAmountError","elements","stripe","onAmountChange","getStripePaymentInfo","type","card","getElement","billing_details","sepa_debit","Error","renderPaymentComponent","event","preventDefault","error","createPaymentMethod","message","map","option","palette","common","black","propTypes","bool","isRequired","object","func","Wrapper"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport {\n  Elements,\n  CardElement,\n  IbanElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport { Grid, Button, Box, withTheme } from \"@material-ui/core\";\nimport StripeCardForm from \"./stripe/StripeCardForm\";\nimport StripeIbanForm from \"./stripe/StripeIBANForm\";\nimport FormDialog from \"../../../shared/components/FormDialog\";\nimport ColoredButton from \"../../../shared/components/ColoredButton\";\nimport HighlightedInformation from \"../../../shared/components/HighlightedInformation\";\nimport ButtonCircularProgress from \"../../../shared/components/ButtonCircularProgress\";\n\nconst stripePromise = loadStripe(\"pk_test_6pRNASCoBOKtIshFeQd4XMUh\");\n\nconst paymentOptions = [\"Credit Card\", \"SEPA Direct Debit\"];\n\nconst AddBalanceDialog = withTheme(function (props) {\n  const { open, theme, onClose, onSuccess } = props;\n\n  const [loading, setLoading] = useState(false);\n  const [paymentOption, setPaymentOption] = useState(\"Credit Card\");\n  const [stripeError, setStripeError] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [amountError, setAmountError] = useState(\"\");\n  const elements = useElements();\n  const stripe = useStripe();\n\n  const onAmountChange = amount => {\n    if (amount < 0) {\n      return;\n    }\n    if (amountError) {\n      setAmountError(\"\");\n    }\n    setAmount(amount);\n  };\n\n  const getStripePaymentInfo = () => {\n    switch (paymentOption) {\n      case \"Credit Card\": {\n        return {\n          type: \"card\",\n          card: elements.getElement(CardElement),\n          billing_details: { name: name }\n        };\n      }\n      case \"SEPA Direct Debit\": {\n        return {\n          type: \"sepa_debit\",\n          sepa_debit: elements.getElement(IbanElement),\n          billing_details: { email: email, name: name }\n        };\n      }\n      default:\n        throw new Error(\"No case selected in switch statement\");\n    }\n  };\n\n  const renderPaymentComponent = () => {\n    switch (paymentOption) {\n      case \"Credit Card\":\n        return (\n          <Fragment>\n            <Box mb={2}>\n              <StripeCardForm\n                stripeError={stripeError}\n                setStripeError={setStripeError}\n                setName={setName}\n                name={name}\n                amount={amount}\n                amountError={amountError}\n                onAmountChange={onAmountChange}\n              />\n            </Box>\n            <HighlightedInformation>\n              You can check this integration using the credit card number{\" \"}\n              <b>4242 4242 4242 4242 04 / 24 24 242 42424</b>\n            </HighlightedInformation>\n          </Fragment>\n        );\n      case \"SEPA Direct Debit\":\n        return (\n          <Fragment>\n            <Box mb={2}>\n              <StripeIbanForm\n                stripeError={stripeError}\n                setStripeError={setStripeError}\n                setName={setName}\n                setEmail={setEmail}\n                name={name}\n                email={email}\n                amount={amount}\n                amountError={amountError}\n                onAmountChange={onAmountChange}\n              />\n            </Box>\n            <HighlightedInformation>\n              You can check this integration using the IBAN\n              <br />\n              <b>DE89370400440532013000</b>\n            </HighlightedInformation>\n          </Fragment>\n        );\n      default:\n        throw new Error(\"No case selected in switch statement\");\n    }\n  };\n\n  return (\n    <FormDialog\n      open={open}\n      onClose={onClose}\n      headline=\"Add Balance\"\n      hideBackdrop={false}\n      loading={loading}\n      onFormSubmit={async event => {\n        event.preventDefault();\n        if (amount <= 0) {\n          setAmountError(\"Can't be zero\");\n          return;\n        }\n        if (stripeError) {\n          setStripeError(\"\");\n        }\n        setLoading(true);\n        const { error } = await stripe.createPaymentMethod(\n          getStripePaymentInfo()\n        );\n        if (error) {\n          setStripeError(error.message);\n          setLoading(false);\n          return;\n        }\n        onSuccess();\n      }}\n      content={\n        <Box pb={2}>\n          <Box mb={2}>\n            <Grid container spacing={1}>\n              {paymentOptions.map(option => (\n                <Grid item key={option}>\n                  <ColoredButton\n                    variant={\n                      option === paymentOption ? \"contained\" : \"outlined\"\n                    }\n                    disableElevation\n                    onClick={() => {\n                      setStripeError(\"\");\n                      setPaymentOption(option);\n                    }}\n                    color={theme.palette.common.black}\n                  >\n                    {option}\n                  </ColoredButton>\n                </Grid>\n              ))}\n            </Grid>\n          </Box>\n          {renderPaymentComponent()}\n        </Box>\n      }\n      actions={\n        <Fragment>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"secondary\"\n            type=\"submit\"\n            size=\"large\"\n            disabled={loading}\n          >\n            Pay with Stripe {loading && <ButtonCircularProgress />}\n          </Button>\n        </Fragment>\n      }\n    />\n  );\n});\n\nAddBalanceDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  theme: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\n\nfunction Wrapper(props) {\n  const { open, onClose, onSuccess } = props;\n  return (\n    <Elements stripe={stripePromise}>\n      {open && (\n        <AddBalanceDialog open={open} onClose={onClose} onSuccess={onSuccess} />\n      )}\n    </Elements>\n  );\n}\n\n\nAddBalanceDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func.isRequired\n};\n\nexport default Wrapper;\n"]},"metadata":{},"sourceType":"module"}