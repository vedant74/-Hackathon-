{"ast":null,"code":"var _jsxFileName = \"/Users/bhavyameghnani/Desktop/react-saas-template/src/logged_out/components/register_login/LoginDialog.js\";\nimport React, { useState, useCallback, useRef, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { withRouter } from \"react-router-dom\";\nimport { TextField, Button, Checkbox, Typography, FormControlLabel, withStyles } from \"@material-ui/core\";\nimport FormDialog from \"../../../shared/components/FormDialog\";\nimport HighlightedInformation from \"../../../shared/components/HighlightedInformation\";\nimport ButtonCircularProgress from \"../../../shared/components/ButtonCircularProgress\";\nimport VisibilityPasswordTextField from \"../../../shared/components/VisibilityPasswordTextField\";\n\nconst styles = theme => ({\n  forgotPassword: {\n    marginTop: theme.spacing(2),\n    color: theme.palette.primary.main,\n    cursor: \"pointer\",\n    \"&:enabled:hover\": {\n      color: theme.palette.primary.dark\n    },\n    \"&:enabled:focus\": {\n      color: theme.palette.primary.dark\n    }\n  },\n  disabledText: {\n    cursor: \"auto\",\n    color: theme.palette.text.disabled\n  },\n  formControlLabel: {\n    marginRight: 0\n  }\n});\n\nfunction LoginDialog(props) {\n  const {\n    setStatus,\n    history,\n    classes,\n    onClose,\n    openChangePasswordDialog,\n    status\n  } = props;\n  const [isLoading, setIsLoading] = useState(false);\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n  const loginEmail = useRef();\n  const loginPassword = useRef();\n  const login = useCallback(() => {\n    setIsLoading(true);\n    setStatus(null);\n\n    if (loginEmail.current.value !== \"test@web.com\") {\n      setTimeout(() => {\n        setStatus(\"invalidEmail\");\n        setIsLoading(false);\n      }, 1500);\n    } else if (loginPassword.current.value !== \"test\") {\n      setTimeout(() => {\n        setStatus(\"invalidPassword\");\n        setIsLoading(false);\n      }, 1500);\n    } else {\n      setTimeout(() => {\n        history.push(\"/c/dashboard\");\n      }, 150);\n    }\n  }, [setIsLoading, loginEmail, loginPassword, history, setStatus]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormDialog, {\n    open: true,\n    onClose: onClose,\n    loading: isLoading,\n    onFormSubmit: e => {\n      e.preventDefault();\n      login();\n    },\n    hideBackdrop: true,\n    headline: \"Login\",\n    content: /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      variant: \"outlined\",\n      margin: \"normal\",\n      error: status === \"invalidEmail\",\n      required: true,\n      fullWidth: true,\n      label: \"Email Address\",\n      inputRef: loginEmail,\n      autoFocus: true,\n      autoComplete: \"off\",\n      type: \"email\",\n      onChange: () => {\n        if (status === \"invalidEmail\") {\n          setStatus(null);\n        }\n      },\n      helperText: status === \"invalidEmail\" && \"This email address isn't associated with an account.\",\n      FormHelperTextProps: {\n        error: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(VisibilityPasswordTextField, {\n      variant: \"outlined\",\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      error: status === \"invalidPassword\",\n      label: \"Password\",\n      inputRef: loginPassword,\n      autoComplete: \"off\",\n      onChange: () => {\n        if (status === \"invalidPassword\") {\n          setStatus(null);\n        }\n      },\n      helperText: status === \"invalidPassword\" ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 19\n        }\n      }, \"Incorrect password. Try again, or click on\", \" \", /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }\n      }, \"\\\"Forgot Password?\\\"\"), \" to reset it.\") : \"\",\n      FormHelperTextProps: {\n        error: true\n      },\n      onVisibilityChange: setIsPasswordVisible,\n      isVisible: isPasswordVisible,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      className: classes.formControlLabel,\n      control: /*#__PURE__*/React.createElement(Checkbox, {\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 24\n        }\n      }),\n      label: /*#__PURE__*/React.createElement(Typography, {\n        variant: \"body1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 22\n        }\n      }, \"Remember me\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }), status === \"verificationEmailSend\" ? /*#__PURE__*/React.createElement(HighlightedInformation, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }, \"We have send instructions on how to reset your password to your email address\") : /*#__PURE__*/React.createElement(HighlightedInformation, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    }, \"Email is: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 27\n      }\n    }, \"test@web.com\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }), \"Password is: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 30\n      }\n    }, \"test\"))),\n    actions: /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"secondary\",\n      disabled: isLoading,\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, \"Login\", isLoading && /*#__PURE__*/React.createElement(ButtonCircularProgress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Typography, {\n      align: \"center\",\n      className: classNames(classes.forgotPassword, isLoading ? classes.disabledText : null),\n      color: \"primary\",\n      onClick: isLoading ? null : openChangePasswordDialog,\n      tabIndex: 0,\n      role: \"button\",\n      onKeyDown: event => {\n        // For screenreaders listen to space and enter events\n        if (!isLoading && event.keyCode === 13 || event.keyCode === 32) {\n          openChangePasswordDialog();\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, \"Forgot Password?\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n}\n\nLoginDialog.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n  setStatus: PropTypes.func.isRequired,\n  openChangePasswordDialog: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired,\n  status: PropTypes.string\n};\nexport default withRouter(withStyles(styles)(LoginDialog));","map":{"version":3,"sources":["/Users/bhavyameghnani/Desktop/react-saas-template/src/logged_out/components/register_login/LoginDialog.js"],"names":["React","useState","useCallback","useRef","Fragment","PropTypes","classNames","withRouter","TextField","Button","Checkbox","Typography","FormControlLabel","withStyles","FormDialog","HighlightedInformation","ButtonCircularProgress","VisibilityPasswordTextField","styles","theme","forgotPassword","marginTop","spacing","color","palette","primary","main","cursor","dark","disabledText","text","disabled","formControlLabel","marginRight","LoginDialog","props","setStatus","history","classes","onClose","openChangePasswordDialog","status","isLoading","setIsLoading","isPasswordVisible","setIsPasswordVisible","loginEmail","loginPassword","login","current","value","setTimeout","push","e","preventDefault","error","event","keyCode","propTypes","object","isRequired","func","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { withRouter } from \"react-router-dom\";\nimport {\n  TextField,\n  Button,\n  Checkbox,\n  Typography,\n  FormControlLabel,\n  withStyles,\n} from \"@material-ui/core\";\nimport FormDialog from \"../../../shared/components/FormDialog\";\nimport HighlightedInformation from \"../../../shared/components/HighlightedInformation\";\nimport ButtonCircularProgress from \"../../../shared/components/ButtonCircularProgress\";\nimport VisibilityPasswordTextField from \"../../../shared/components/VisibilityPasswordTextField\";\n\nconst styles = (theme) => ({\n  forgotPassword: {\n    marginTop: theme.spacing(2),\n    color: theme.palette.primary.main,\n    cursor: \"pointer\",\n    \"&:enabled:hover\": {\n      color: theme.palette.primary.dark,\n    },\n    \"&:enabled:focus\": {\n      color: theme.palette.primary.dark,\n    },\n  },\n  disabledText: {\n    cursor: \"auto\",\n    color: theme.palette.text.disabled,\n  },\n  formControlLabel: {\n    marginRight: 0,\n  },\n});\n\nfunction LoginDialog(props) {\n  const {\n    setStatus,\n    history,\n    classes,\n    onClose,\n    openChangePasswordDialog,\n    status,\n  } = props;\n  const [isLoading, setIsLoading] = useState(false);\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n  const loginEmail = useRef();\n  const loginPassword = useRef();\n\n  const login = useCallback(() => {\n    setIsLoading(true);\n    setStatus(null);\n    if (loginEmail.current.value !== \"test@web.com\") {\n      setTimeout(() => {\n        setStatus(\"invalidEmail\");\n        setIsLoading(false);\n      }, 1500);\n    } else if (loginPassword.current.value !== \"test\") {\n      setTimeout(() => {\n        setStatus(\"invalidPassword\");\n        setIsLoading(false);\n      }, 1500);\n    } else {\n      setTimeout(() => {\n        history.push(\"/c/dashboard\");\n      }, 150);\n    }\n  }, [setIsLoading, loginEmail, loginPassword, history, setStatus]);\n\n  return (\n    <Fragment>\n      <FormDialog\n        open\n        onClose={onClose}\n        loading={isLoading}\n        onFormSubmit={(e) => {\n          e.preventDefault();\n          login();\n        }}\n        hideBackdrop\n        headline=\"Login\"\n        content={\n          <Fragment>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              error={status === \"invalidEmail\"}\n              required\n              fullWidth\n              label=\"Email Address\"\n              inputRef={loginEmail}\n              autoFocus\n              autoComplete=\"off\"\n              type=\"email\"\n              onChange={() => {\n                if (status === \"invalidEmail\") {\n                  setStatus(null);\n                }\n              }}\n              helperText={\n                status === \"invalidEmail\" &&\n                \"This email address isn't associated with an account.\"\n              }\n              FormHelperTextProps={{ error: true }}\n            />\n            <VisibilityPasswordTextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              error={status === \"invalidPassword\"}\n              label=\"Password\"\n              inputRef={loginPassword}\n              autoComplete=\"off\"\n              onChange={() => {\n                if (status === \"invalidPassword\") {\n                  setStatus(null);\n                }\n              }}\n              helperText={\n                status === \"invalidPassword\" ? (\n                  <span>\n                    Incorrect password. Try again, or click on{\" \"}\n                    <b>&quot;Forgot Password?&quot;</b> to reset it.\n                  </span>\n                ) : (\n                  \"\"\n                )\n              }\n              FormHelperTextProps={{ error: true }}\n              onVisibilityChange={setIsPasswordVisible}\n              isVisible={isPasswordVisible}\n            />\n            <FormControlLabel\n              className={classes.formControlLabel}\n              control={<Checkbox color=\"primary\" />}\n              label={<Typography variant=\"body1\">Remember me</Typography>}\n            />\n            {status === \"verificationEmailSend\" ? (\n              <HighlightedInformation>\n                We have send instructions on how to reset your password to your\n                email address\n              </HighlightedInformation>\n            ) : (\n              <HighlightedInformation>\n                Email is: <b>test@web.com</b>\n                <br />\n                Password is: <b>test</b>\n              </HighlightedInformation>\n            )}\n          </Fragment>\n        }\n        actions={\n          <Fragment>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"secondary\"\n              disabled={isLoading}\n              size=\"large\"\n            >\n              Login\n              {isLoading && <ButtonCircularProgress />}\n            </Button>\n            <Typography\n              align=\"center\"\n              className={classNames(\n                classes.forgotPassword,\n                isLoading ? classes.disabledText : null\n              )}\n              color=\"primary\"\n              onClick={isLoading ? null : openChangePasswordDialog}\n              tabIndex={0}\n              role=\"button\"\n              onKeyDown={(event) => {\n                // For screenreaders listen to space and enter events\n                if (\n                  (!isLoading && event.keyCode === 13) ||\n                  event.keyCode === 32\n                ) {\n                  openChangePasswordDialog();\n                }\n              }}\n            >\n              Forgot Password?\n            </Typography>\n          </Fragment>\n        }\n      />\n    </Fragment>\n  );\n}\n\nLoginDialog.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onClose: PropTypes.func.isRequired,\n  setStatus: PropTypes.func.isRequired,\n  openChangePasswordDialog: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired,\n  status: PropTypes.string,\n};\n\nexport default withRouter(withStyles(styles)(LoginDialog));\n"]},"metadata":{},"sourceType":"module"}